@using System.Web.Mvc;
@using VocaDb.Model.DataContracts;
@using VocaDb.Model.DataContracts.PVs;
@using VocaDb.Model.DataContracts.Versioning
@using VocaDb.Model.Domain;
@using VocaDb.Web.Helpers;
@inherits VocaDb.Web.Code.HelperPage

@functions {
	public static HelperResult DataRow<T>(string name, T primary, T compared, Func<T, object> valGetter)
		where T : class {

		var val1 = valGetter(primary);
		var val2 = (compared != null ? valGetter(compared) : null);

		return DataRow(name, val1, val2);
		
    }

	public static HelperResult DataRow<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<T, object> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = (comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null);

		return DataRow(name, val1, val2);

	}

	public static HelperResult DataRowD<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<T, object> valGetter)
		where T : class {

		return DataRow(name, comparedVersions, valGetter);

	}	

	public static HelperResult DataRowList<T>(string name, T primary, T compared, Func<T, IEnumerable<MvcHtmlString>> valGetter)
		where T : class {

		var val1 = valGetter(primary);
		var val2 = (compared != null ? valGetter(compared) : null);

		return DataRowList(name, val1, val2);
			
	}

	public static HelperResult DataRowList<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<T, IEnumerable<MvcHtmlString>> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = (comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null);

		return DataRowList(name, val1, val2);

	}
		
	public static string FormatReleaseDate(OptionalDateTimeContract contract) {
		return OptionalDateTime.ToDateTime(contract.Year, contract.Month, contract.Day).ToShortDateString();
	}

	public static HelperResult ObjectRefList<T>(string name, ComparedVersionsContract<T> comparedVersions, 
		Func<T, IEnumerable<ObjectRefContract>> valGetter) where T : class {
		
		return DataRowList(name, comparedVersions, d => DataFormatUtils.GenerateHtmlFromHelper(valGetter(d), ObjectRefInfo));
		
	}

	public static HelperResult PictureRow<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<int, string> urlGetter)
		where T : class {

		var val1 = urlGetter(comparedVersions.FirstId);
		var val2 = (comparedVersions.SecondId != 0 ? urlGetter(comparedVersions.SecondId) : null);

		return PictureRow(name, val1, val2);
				
	}
	
	public static HelperResult TranslatedNameRow<T>(ComparedVersionsContract<T> comparedVersions, Func<T, TranslatedStringContract> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null;

		return TranslatedNameRow(val1, val2);
		
	}

	public static HelperResult TranslatedNameRow<T>(ComparedVersionsContract<T> comparedVersions, Func<T, ArchivedTranslatedStringContract> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null;

		return TranslatedNameRow(val1, val2);

	}
	
}
	
@helper ArchivedObjectVersionProperties(VocaDb.Web.Models.Shared.ArchivedObjectVersion ver, 
VocaDb.Web.Models.Shared.ArchivedObjectVersion compareTo = null) {
	
	<fieldset>
		<legend>Properties</legend>
	
		<table>
			<tr>
				<td>Version</td>
				<td>@ver.Contract.Version</td>
				<td>
					@if (compareTo != null) {
						@compareTo.Contract.Version
					}
				</td>
			</tr><tr>
				<td>Status</td>
				<td>@ver.Status</td>
				<td>
					@if (compareTo != null) {
						@compareTo.Status
					}
				</td>
			</tr><tr>
				<td>Snapshot</td>
				<td>@ver.Contract.IsSnapshot</td>
				<td>
					@if (compareTo != null) {
						@compareTo.Contract.IsSnapshot
					}
				</td>
			</tr><tr>
				<td>Created</td>
				<td>@ver.Contract.Created</td>
				<td>
					@if (compareTo != null) {
						@compareTo.Contract.Created
					}
				</td>
			</tr><tr>
				<td>Author</td>
				<td>@Html.UserLink(ver.Contract.Author, ver.Contract.AgentName)</td>
				<td>
					@if (compareTo != null) {
						@Html.UserLink(compareTo.Contract.Author, compareTo.Contract.AgentName)
					}
				</td>
			</tr><tr>
				<td>Reason</td>
				<td>@ver.Reason</td>
				<td>
					@if (compareTo != null) {
						@compareTo.Reason
					}
				</td>
			</tr><tr>
				<td>Changed</td>
				<td>@ver.ChangeMessage</td>
				<td>
					@if (compareTo != null) {
						@compareTo.ChangeMessage
					}
				</td>
			</tr>
			<tr>
				<td>Notes</td>
				<td>@ver.Notes</td>
				<td>
					@if (compareTo != null) {
						@compareTo.Notes
					}
				</td>
			</tr>
		</table>	

	</fieldset>
	
}

@helper CurrentVersionMessage(int version, EntryStatus status) {
	<p>@ViewRes.ArchivedObjectVersionsStrings.CurrentVersionIs @version (@Translate.EntryStatusNames[status]).</p>	
}

@helper DataRow(string name, object val, object compareVal = null) {
	<tr class="@(compareVal != null && val != compareVal ? "changed" : "")">
		<td>@name</td>
		<td>@val</td>
		<td>@compareVal</td>
	</tr>	
}

@helper DataRowList(string name, IEnumerable<MvcHtmlString> rows, IEnumerable<MvcHtmlString> compareRows = null) {
	if (rows != null) {
	<tr>
		<td>@name</td>
		<td>
			<ul>
			@foreach (var row in rows) {
				<li>@row</li>
   }			
			</ul>
		</td>
		<td>
			@if (compareRows != null) {
				<ul>
				@foreach (var row in compareRows) {
					<li>@row</li>
				}			
				</ul>	
			}		
		</td>
	</tr>	
	}
}

@helper NameInfo(LocalizedStringContract name) {
	<text>@Translate.ContentLanguageSelectionName(name.Language): @name.Value</text>
}

@helper ObjectRefInfo(ObjectRefContract objRef) {
	if (objRef != null) {
	<text>@objRef.NameHint [@objRef.Id]</text>
	}
}

@helper ObjectRefList(string name, IEnumerable<ObjectRefContract> objRefs) {
	@DataRowList(name, DataFormatUtils.GenerateHtmlFromHelper(objRefs, ObjectRefInfo));
}

@helper PictureRow(string name, string url, string compareToUrl = null) {
	<tr>
		<td>@name</td>
		<td><img src="@url" alt="@name" class="coverPic" /></td>
		<td>
			@if (!string.IsNullOrEmpty(compareToUrl)) {
				<img src="@compareToUrl" alt="@name" class="coverPic" />
			}
		</td>
	</tr>	

}

@helper PVInfo(ArchivedPVContract pv) {
	<text>@pv.Service (@pv.PVType): @pv.PVId</text>
}

@helper TranslatedNameRow(TranslatedStringContract name, TranslatedStringContract compareToName = null) {
	<tr>
		<td>Original language:</td>
		<td>@name.DefaultLanguage</td>
		<td>
			@if (compareToName != null) {
				@compareToName.DefaultLanguage
			}
		</td>
	</tr>
	<tr>
		<td>Primary names</td>
		<td>
			Non-English: @name.Japanese<br />
			Romanized: @name.Romaji<br />
			English: @name.English<br />
		</td>
		<td>
			@if (compareToName != null) {
				@("Non-English:" + compareToName.Japanese)<br />
				@("Romanized:" + compareToName.Romaji)<br />
				@("English:" + compareToName.English)<br />
			}
		</td>
	</tr>
}

@helper TranslatedNameRow(ArchivedTranslatedStringContract name, ArchivedTranslatedStringContract compareToName = null) {
	<tr>
		<td>Original language:</td>
		<td>@name.DefaultLanguage</td>
		<td>
			@if (compareToName != null) {
				@compareToName.DefaultLanguage
			}
		</td>
	</tr>
	<tr>
		<td>Primary names</td>
		<td>
			Non-English: @name.Japanese<br />
			Romanized: @name.Romaji<br />
			English: @name.English<br />
		</td>
		<td>
			@if (compareToName != null) {
				@("Non-English:" + compareToName.Japanese)<br />
				@("Romanized:" + compareToName.Romaji)<br />
				@("English:" + compareToName.English)<br />
			}
		</td>
	</tr>
}

@helper WebLinkInfo(ArchivedWebLinkContract link) {
	if (!string.IsNullOrEmpty(link.Description)) {
		@link.Description<text>: </text>
	}
	@link.Url
}
