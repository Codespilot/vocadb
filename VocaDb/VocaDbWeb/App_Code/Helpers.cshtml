@inherits VocaDb.Web.Code.HelperPage
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using VocaDb.Model.Domain;
@using VocaDb.Model.Domain.Songs;
@using VocaDb.Web.Helpers;

@helper AjaxLoader(string id) {
	<img id="@id" src="@Url.Content("~/Content/ajax-loader.gif")" alt="loading..." style="display:none;" />
}

@helper ArchivedObjectVersions(IEnumerable<VocaDb.Web.Models.Shared.ArchivedObjectVersion> archivedVersions, Func<int, string> linkFunc = null) {
	
	<table>
		<tr>
			<th>@ViewRes.ArchivedObjectVersionsStrings.Version</th>
			<th>@ViewRes.ArchivedObjectVersionsStrings.Created</th>
			<th>@ViewRes.ArchivedObjectVersionsStrings.Author</th>
			<th>@ViewRes.ArchivedObjectVersionsStrings.Notes</th>
		</tr>
		@foreach (var ver in archivedVersions.OrderByDescending(v => v.Contract.Version)) {
			<tr>
				<td>
					@if (linkFunc != null) {
						<a href="@linkFunc(ver.Id)">
						@ver.Contract.Version
						(@Translate.EntryStatusNames[ver.Status])
						</a>
					} else {
						<text>
						@ver.Contract.Version
						(@Translate.EntryStatusNames[ver.Status])
						</text>
					}
				</td>
				<td>
					@ver.Contract.Created
				</td>
				<td>
					@Html.UserLink(ver.Contract.Author, ver.Contract.AgentName)
				</td>
				<td>
					@ver.Reason
					@if (!string.IsNullOrEmpty(ver.ChangeMessage)) {
						@(" (" + ver.ChangeMessage + ")")
	 }
				</td>
			</tr>
  }
	</table>	
	
}

@helper ArchivedObjectVersionProperties(VocaDb.Web.Models.Shared.ArchivedObjectVersion ver) {
	
	<fieldset>
		<legend>Properties</legend>
	
		<table>
			<tr>
				<td>Version</td>
				<td>@ver.Contract.Version</td>
			</tr><tr>
				<td>Status</td>
				<td>@ver.Status</td>
			</tr><tr>
				<td>Snapshot</td>
				<td>@ver.Contract.IsSnapshot</td>
			</tr><tr>
				<td>Created</td>
				<td>@ver.Contract.Created</td>
			</tr><tr>
				<td>Author</td>
				<td>@Html.UserLink(ver.Contract.Author, ver.Contract.AgentName)</td>
			</tr><tr>
				<td>Reason</td>
				<td>@ver.Reason</td>
			</tr><tr>
				<td>Changed</td>
				<td>@ver.ChangeMessage</td>
			</tr>
		</table>	

	</fieldset>
	
}

@helper ConvertNewlinesToBreaks(string text) {
	var lines = text.Split(new[] { Environment.NewLine, "\n" }, StringSplitOptions.None);
	foreach (var line in lines) {
		@line
		<br />
	}
}

@helper DraftIcon(VocaDb.Model.DataContracts.Albums.AlbumContract album) {
	@Helpers.DraftIcon(album.Status)
}

@helper DraftIcon(VocaDb.Model.Domain.EntryStatus status) {
	if (status == VocaDb.Model.Domain.EntryStatus.Draft) {
		<img src="@Url.Content("~/Content/draft.png")" title="@HelperRes.HelperStrings.DraftIconTitle" alt="draft" />
	}
}

@helper DraftMessage(string section) {
	using (Html.BeginHighlightPanel()) {
		@Helpers.NotificationIcon()
		<span>@HelperRes.HelperStrings.DraftMessage</span>
		<span>@HelperRes.HelperStrings.SeeGuidePre <a href="@(Url.Action("Index", "Help") + "?guidelines+" + section)">@HelperRes.HelperStrings.SeeGuide</a> @HelperRes.HelperStrings.SeeGuidePost</span>
	}
}

@helper EmbedPV(VocaDb.Model.DataContracts.PVs.PVContract pv, int width = 560, int height = 315) {
	
	if (pv.Service == VocaDb.Model.Domain.PVs.PVService.NicoNicoDouga) {
		<script type="text/javascript" src="@(string.Format("http://ext.nicovideo.jp/thumb_watch/{0}?w={1}&h={2}", pv.PVId, width, height))"></script>
	}

	if (pv.Service == VocaDb.Model.Domain.PVs.PVService.Youtube) {
		<iframe width="@width" height="@height" src="http://www.youtube.com/embed/@pv.PVId?wmode=transparent" frameborder="0" wmode="Opaque" allowfullscreen></iframe>
	}	
	
}

@helper EmbedPVThumb(VocaDb.Model.DataContracts.PVs.PVContract pv, int width = 340, int height = 200) {	
	if (pv != null) {
		if (pv.Service == VocaDb.Model.Domain.PVs.PVService.NicoNicoDouga) {
		<iframe width="@width" height="@height" src="http://ext.nicovideo.jp/thumb/@pv.PVId" scrolling="no" style="border:solid 1px #CCC;" frameborder="0"></iframe>
		}
		
		if (pv.Service == VocaDb.Model.Domain.PVs.PVService.Youtube) {
			EmbedPV(pv, width, height);
		}
	}
}

@helper EntryValidationMessage(bool draft, VocaDb.Model.Service.EntryValidators.ValidationResult validationResult, string helpSection) {
	if (!validationResult.Passed || draft) {
		using (Html.BeginHighlightPanel()) {
			@Helpers.NotificationIcon()
			if (!validationResult.Passed) {
				<span>This entry is missing the following information:</span><br />
				<ul>
					@foreach (var line in validationResult.Errors) {
						<li>@line</li>
	 }
				</ul>
			} else if (draft) {
				<span>This entry contains all the required information to be marked as finalized (not draft).</span><br />
			}
			<span>See the <a href="@(Url.Action("Index", "Help") + "?guidelines+" + helpSection)">guide</a> for more information.</span>			
		}
	}
}

@helper EntrySearchBox(string prefix, bool includeIdBox) {
	
	if (includeIdBox) {
	<input type="hidden" name="@(prefix + "Id")" id="@(prefix + "Id")" />	 
	}
	
	<div>
	@Html.TextBox(prefix + "Name", string.Empty, new { id = prefix + "Name", maxlength = "128" })<br />
	<div id="@(prefix + "List")"></div>
	</div>

}

@helper EntryStatusMessage(EntryStatus status) {
	switch (status) {
		case EntryStatus.Draft:
			<span title="@HelperRes.HelperStrings.StatusDescriptionDraft">
				<span class="icon draftIcon"></span>
				@Translate.EntryStatusNames[EntryStatus.Draft]
			</span>
			break;
			
		case EntryStatus.Finished:
			<span title="@HelperRes.HelperStrings.StatusDescriptionFinished">
				<span class="icon asteriskIcon"></span>
				@Translate.EntryStatusNames[EntryStatus.Finished]
			</span>
			break;

		case EntryStatus.Approved:
			<span title="@HelperRes.HelperStrings.StatusDescriptionApproved">
				<span class="icon tickIcon"></span>
				@Translate.EntryStatusNames[EntryStatus.Approved]
			</span>
			break;
			
		case EntryStatus.Locked:
			<span title="@HelperRes.HelperStrings.StatusDescriptionLocked">
				<span class="icon lockIcon"></span>
				@Translate.EntryStatusNames[EntryStatus.Locked]
			</span>
			break;

	}	
}

@helper FormatPVLink(VocaDb.Model.DataContracts.PVs.PVContract pv, bool type = true) {
	<a href="@pv.Url"><img src="@Html.VideoServiceLinkUrl(pv.Service)" alt="@pv.Service" /> @(!string.IsNullOrEmpty(pv.Name) ? pv.Name : pv.Service.ToString())
	@if (type) {
		@("(" + Translate.PVTypeNames[pv.PVType] + ")")
	}
	</a>
}

@helper GoogleSiteSearch() {
	
<div id="cse" style="width: 100%;">Loading</div>
<script src="http://www.google.com/jsapi" type="text/javascript"></script>
<script type="text/javascript">
	google.load('search', '1', { language: 'en' });
	google.setOnLoadCallback(function () {
		var customSearchControl = new google.search.CustomSearchControl('010575853430721629857:uosxb117-zg');
		customSearchControl.setResultSetSize(google.search.Search.FILTERED_CSE_RESULTSET);
		customSearchControl.draw('cse');
	}, true);
</script>
<link rel="stylesheet" href="http://www.google.com/cse/style/look/default.css" type="text/css" />	
	
}

@helper HelpMessage(string message, string id = null) {
	if (string.IsNullOrEmpty(id)) {
		<span class="helpIcon" title="@message"></span>
	} else {
		<span class="helpIcon" title="@message" id="@id"></span>	 
	}
}

@helper NamesList(IEnumerable<VocaDb.Web.Models.LocalizedStringEdit> names) {
	
	<table>
		<thead>
			<tr>
				<th>Name (required)</th>
				<th>Language</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody id="namesListBody">
			@foreach (var name in names) {
	   RenderPartialExtensions.RenderPartial(Html, "LocalizedStringEditableRow", name);
   }
		</tbody>

	</table>
	
	<a href="#" id="nameAdd" class="textLink addLink">New row</a>

}

@helper NotificationIcon() {
	<span class="ui-icon ui-icon-info" style="float: left; margin-right: .3em;"></span>
}

@helper NotificationPanel(string message, string messageId = "") {
	using (Html.BeginHighlightPanel()) {
		@Helpers.NotificationIcon()
		<span id="@messageId">@message</span>
	}
}

@helper PrintComment(VocaDb.Model.DataContracts.CommentContract contract, bool allowDelete) {	
	<div>
		<h3>
			@Html.ProfileIcon(contract.Author, 25)
			@Html.UserLink(contract.Author, contract.AuthorName)
			&nbsp;-&nbsp;
			@contract.Created

			@if (allowDelete && Login.CanDeleteComment(contract)) {
				<a href="#" id="deleteComment_@(contract.Id)" class="deleteComment">Delete</a>
   }
		</h3>
		<p>
			@Helpers.ConvertNewlinesToBreaks(contract.Message)
		</p>
		<hr />
	</div>	
}

@helper Stars(int current, int max) {
	for (int i = 1; i <= max; ++i) {
		if (current >= i) {
			<img src="@Url.Content("~/Content/star.png")" alt="*" />
		} else {
			<img src="@Url.Content("~/Content/star_disabled.png")" alt="" />
		}
	}
}

@helper ValidationSymmaryPanel(string message) {
	if (!ViewData.ModelState.IsValid) {
		using (Html.BeginErrorPanel()) {
			<span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span>
			@Html.ValidationSummary(false, message)
		}
	}
}

@helper WebLinksList(IEnumerable<VocaDb.Web.Models.Shared.WebLinkDisplay> webLinks) {
	
	<table>
		<thead>
			<tr>
				<th>Description</th>
				<th>URL (required)</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody id="webLinksListBody">
			@foreach (var webLink in webLinks) {
	   Html.RenderPartial("WebLinkEditRow", webLink);
   }
		</tbody>
	</table>
	
	<a href="#" id="webLinkAdd" class="textLink addLink">New row</a>
	
}