@inherits VocaDb.Web.Code.HelperPage
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using VocaDb.Model.DataContracts.Songs;
@using VocaDb.Model.Domain.Images
@using VocaDb.Model.Domain.Songs
@using VocaDb.Model.Helpers
@using VocaDb.Model.Service.Search.AlbumSearch
@using VocaDb.Model.Utils
@using VocaDb.Web.Helpers;

@helper ArtistParticipationStatusOptionsKnockout(string binding) {
	{
		var options = new Dictionary<string, string> {
			{ ArtistAlbumParticipationStatus.Everything.ToString(), "Everything" },
			{ ArtistAlbumParticipationStatus.OnlyMainAlbums.ToString(), "Only main songs" },
			{ ArtistAlbumParticipationStatus.OnlyCollaborations.ToString(), "Only collaborations" },
		};
		@KnockoutHelpers.CheckBoxButtons(options, binding)
	}
}

@helper LyricsInfo(LyricsForSongContract lyrics) {
	<text>@lyrics.Language (@lyrics.Source)</text>
}

@helper PrintArchivedSongData(ComparedSongsContract comparedSongs) {

	<div class="well well-transparent archived-entry-contents">
		<h4>Content</h4>

		<table class="table table-bordered">
			@ArchivedEntryHelpers.DataRow("Id", comparedSongs.FirstData.Id)
			@ArchivedEntryHelpers.TranslatedNameRow(comparedSongs, d => d.TranslatedName)
			@ArchivedEntryHelpers.DataRowList("Names", comparedSongs, d => DataFormatUtils.GenerateHtmlFromHelper(d.Names, ArchivedEntryHelpers.NameInfo))
			@ArchivedEntryHelpers.DataRow("Notes", comparedSongs, d => d.Notes)
			@ArchivedEntryHelpers.DataRow("Song type", comparedSongs, d => d.SongType)
			@ArchivedEntryHelpers.DataRow("Original version", comparedSongs, d => ArchivedEntryHelpers.ObjectRefInfo(d.OriginalVersion))
			@ArchivedEntryHelpers.DataRow("Duration", comparedSongs, d => DateTimeUtils.FormatFromSeconds(d.LengthSeconds))
			@ArchivedEntryHelpers.DataRowList("External links", comparedSongs, d => DataFormatUtils.GenerateHtmlFromHelper(d.WebLinks, ArchivedEntryHelpers.WebLinkInfo))
			@ArchivedEntryHelpers.DataRowList("Artists", comparedSongs, d => DataFormatUtils.GenerateHtml(d.Artists != null ? (d.Artists.OrderBy(a => a.NameHint)) : null, artist => MvcHtmlString.Create(artist.NameHint + " [" + artist.Id + "] - IsSupport: " + artist.IsSupport + ", Roles: " + artist.Roles)))
			@ArchivedEntryHelpers.DataRowList("PVs", comparedSongs, d => DataFormatUtils.GenerateHtmlFromHelper(d.PVs, ArchivedEntryHelpers.PVInfo))
			@ArchivedEntryHelpers.DataRowList("Lyrics", comparedSongs, d => DataFormatUtils.GenerateHtmlFromHelper(d.Lyrics, LyricsInfo))
		</table>

	</div>

}

@helper PVPreviewKnockout(string getPvServiceIcons) {
	<div data-bind="slideVisible: preview, complete: destroyPV" class="pvPreview" style="display: none;">
		<div data-bind="with: ratingButtons" class="pull-right">
			@{ Html.RenderPartial("Partials/_PVRatingButtonsForIndex"); }

			@* PV service switcher *@
			<div data-bind="visible: $parent.pvServices && $parent.pvServices.indexOf(',') > 0, foreach: @(getPvServiceIcons)($parent.pvServices)" class="pv-preview-services">
				<a class="btn" data-bind="click: function () { $parents[1].switchPV(service); }, attr: { title: service }, css: { active: service == $parents[1].pvService() }">
					<img data-bind="attr: { src: url }" />
				</a>
			</div>
		</div>
		<div data-bind="html: previewHtml"></div>
	</div>
}

@helper SongIconLink(SongContract song) {
	<a href="@Url.Action("Details", "Song", ViewHelper.GetRouteParams(song))">
		<img src="@song.ThumbUrl" alt="Cover" class="coverPicThumb" />
	</a>		
}

@helper SongLink(SongContract song) {
	@Html.ActionLink(song.Name, "Details", "Song", ViewHelper.GetRouteParams(song), new { title = song.AdditionalNames })
}

@helper Songs(IEnumerable<SongContract> songs, bool songType = false) {
	
	<table>
		@foreach (var song in songs) {
		<tr>
			<td>
				@if (!string.IsNullOrEmpty(song.ThumbUrl)) {
					@SongIconLink(song)
				}
			</td>
			<td>
				@SongLink(song)
				(@Translate.SongTypeNames[song.SongType])
				<br />
				<span class="extraInfo">@song.ArtistString</span>
			</td>
	   </tr>
	 }	
	</table>
		
}

@helper Songs(IEnumerable<SongWithAlbumContract> songs, bool songType = false, bool album = false) {
	
	<table class="table-striped table-hover">
		@foreach (var song in songs) {
		<tr>
			<td>
				@if (!string.IsNullOrEmpty(song.ThumbUrl)) {
					@SongIconLink(song)
				}
			</td>
			<td>
				@SongLink(song)
				&nbsp;
				@SongTypeLabel(song.SongType)
				@Helpers.PVServiceIcons(song.PVServices)
				<br />
				<span class="extraInfo">@song.ArtistString</span><br />
				@if (album && song.Album != null) {
				<span class="extraInfo">@HelperRes.SongHelpersStrings.FromAlbum @AlbumHelpers.DetailsLink(song.Album)</span><br />
				}
			</td>
	   </tr>
	 }	
	</table>
		
}

@helper SongGrid(IEnumerable<SongContract> songs, int columns,
	bool displayType = false) {
	
	<table>
		@{ int i = 0; }
	
		@foreach (var song in songs) {
			if (i % columns == 0) {
				@Html.Raw("<tr>")
			}
			<td>
				@if (!string.IsNullOrEmpty(song.ThumbUrl)) {
				    @SongIconLink(song)
				}
			</td>
			<td>
				@SongLink(song)
				@if (displayType) {
					@SongTypeLabel(song.SongType)
				}
				<br />
				<span class="extraInfo">@song.ArtistString</span>
			</td>
			{ i++; }
			if (i % columns == 0) {
				@Html.Raw("</tr>")
			}
		}
		@if (i % columns != 0) {
			@Html.Raw("</tr>")
		}
	</table>
			
}

@helper SongLists(IEnumerable<SongListContract> songLists) {
	
	<table class="table table-striped">
		<tbody>
		@foreach (var list in songLists) {
			var thumbUrl = ImageHelper.GetImageUrl(list.Thumb, ImageSize.SmallThumb, checkExists: true);
			<tr>
				<td style="width: 75px">
					@if (!string.IsNullOrEmpty(thumbUrl)) {
						<a href="@Url.Action("Details", "SongList", new { id = list.Id })">
							<img class="coverPicThumb" src="@thumbUrl" alt="Picture" />
						</a>
					}
				</td>
				<td>@Html.ActionLink(list.Name, "Details", "SongList", new { id = list.Id }, new { title = list.Description })</td>
				<td>
					@if (list.CanEdit) {
						<a href="@Url.Action("Edit", "SongList", new { id = list.Id })" class="textLink editLink">@ViewRes.SharedStrings.Edit</a>
					}
				</td>
			</tr>
		}
		</tbody>
	</table>

}

@helper SongsList(IList<SongContract> songs, bool showType = false) {

	foreach (var song in songs) {
		if (showType) {
			@SongTypeLabel(song.SongType)
		}
		@SongLink(song)
		if (song != songs.Last()) {
			@(", ")
		}
	}
}

@helper SongTypeLabel(SongType songType) {
	switch (songType) {
		case SongType.Cover:
			<span class="label" title="@Translate.SongTypeNames[songType]">C</span>
			break;

		case SongType.DramaPV:
			<span class="label label-success" title="@Translate.SongTypeNames[songType]">D</span>
			break;		
			
		case SongType.Instrumental:
			<span class="label label-inverse" title="@Translate.SongTypeNames[songType]">I</span>
			break;
			
		case SongType.Mashup:
			<span class="label" title="@Translate.SongTypeNames[songType]">M</span>
			break;
			
		case SongType.Original:
			<span class="label label-info" title="@Translate.SongTypeNames[songType]">O</span>
			break;
			
		case SongType.Other:
			<span class="label" title="@Translate.SongTypeNames[songType]">O</span>
			break;
			
		case SongType.Remaster:
			<span class="label label-info" title="@Translate.SongTypeNames[songType]">R</span>
			break;
			
		case SongType.Remix:
			<span class="label" title="@Translate.SongTypeNames[songType]">R</span>
			break;
			
		case SongType.MusicPV:
			<span class="label label-success" title="@Translate.SongTypeNames[songType]">PV</span>
			break;		
	}
}

@helper SongTypesDropdownKnockout(string binding) {
	@KnockoutHelpers.CheckBoxButtons(Translate.SongTypeNames.GetValuesAndNames(AppConfig.SongTypes).ToDictionary(k => k.Key.ToString(), k => k.Value), binding);
}