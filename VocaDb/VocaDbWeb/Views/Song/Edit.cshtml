@using System.Web.Optimization
@using VocaDb.Web.Models
@using VocaDb.Web.Helpers
@using Newtonsoft.Json
@using ValidationErrors = VocaDb.Model.Resources.SongValidationErrors;
@inherits VocaDb.Web.Code.VocaDbPage<VocaDb.Web.Models.Song.SongEditViewModel>

@{
	ViewBag.Title = "Edit song - " + Model.Name;
	ViewBag.Parents = new[] { 
		Html.ActionLink("Songs", "Index", "Search", UrlMapper.Search.Songs(), null), 
		Html.ActionLink(Model.Name, "Details", new { id = Model.Id }) 
	};
	
	var validationErrors = new Dictionary<string, string> {
		{ "validationError_unspecifiedNames", ValidationErrors.UnspecifiedNames },
		{ "validationError_needArtist", ValidationErrors.NeedArtist },
		{ "validationError_needProducer", ValidationErrors.NeedProducer },
		{ "validationError_needType", ValidationErrors.NeedType },
		{ "validationError_nonInstrumentalSongNeedsVocalists", ValidationErrors.NonInstrumentalSongNeedsVocalists },
	};
	
}


@section Toolbar {
@if (Login.CanDeleteEntries) {
	if (!Model.Deleted) {
		@Html.ActionLink("Delete", "Delete", new { id = Model.Id }, new { id = "deleteLink", onclick = "return confirm(\"Are you sure you want to delete this song?\");" })
	} else {
		@Html.ActionLink("Restore", "Restore", new { id = Model.Id }, new { id = "restoreLink" })		
	}
	@Html.Raw("&nbsp")
}
@if (Login.CanMergeEntries) {
	@Html.ActionLink("Merge", "Merge", new { id = Model.Id }, new { id = "mergeLink" })
}
}

@Helpers.ValidationSymmaryPanel("Unable to save properties.")

@KnockoutHelpers.EntryValidationMessage(Model.Draft, validationErrors, "glsongs")

<br />
<form action="@Url.Action("Edit", "Song")" method="POST" data-bind="submit: submit">
	@Html.HiddenFor(m => m.Id)
	@Html.HiddenForKnockout(m => m.Length, "value: length")

	@Helpers.SaveAndBackBtn(Url.Action("Details", new { Model.Id }))
	
	<div id="tabs">

		<ul>
			<li><a href="#basicInfoTab">Basic info</a></li>
			<li><a href="#artistsTab">Artists</a></li>
			<li><a href="#pvsTab">Media</a></li>
			<li><a href="#lyricsTab">Lyrics</a></li>
		</ul>

		<div id="basicInfoTab">

			<div class="editor-label">
				@Html.LabelFor(m => m.DefaultLanguageSelection)
			</div>
			<div class="editor-field">
				@Html.LanguageSelectionDropDownListFor(m => m.DefaultLanguageSelection)
			</div>

			<div class="editor-label">
				<label class="helpTip" data-bind="qTip: null" title="@ViewRes.EntryEditStrings.NameHelp">
					Primary name (in one or more languages)
				</label>
				@Helpers.RequiredField()
				<span data-bind="visible: validationError_unspecifiedNames, qTip" class="icon errorIcon" title="@ValidationErrors.UnspecifiedNames"></span>
			</div>
			<div class="editor-field" data-bind="with: names">
				@{ Html.RenderPartial("KnockoutPartials/_NamesEditor"); }
				<input type="hidden" name="Names" id="Names" data-bind="value: ko.toJSON(allNames)" />
			</div>

			<div class="editor-label">
				@Html.LabelFor(m => m.Notes)
			</div>
			<div class="editor-field">
				@Html.TextAreaFor(m => m.Notes, 6, 70, new { @class = "span4", maxlength = 800 })
			</div>

			<div class="editor-label">
				@Html.LabelFor(m => m.SongType)
			</div>
			<div class="editor-field">
				<div class="row-fluid">
					<div class="span4">
						@Html.DropdownForKnockout(m => m.SongType, ViewHelper.CreateSongTypesList(null), "value: songTypeStr")
						<span data-bind="visible: validationError_needType, qTip" class="icon errorIcon" title="@ValidationErrors.NeedType"></span>
					</div>
				</div>
			</div>
	
			@if (Model.SongType != VocaDb.Model.Domain.Songs.SongType.Original) {
			<div class="editor-label">
				<label class="helpTip" data-bind="qTip: null" title="If the original version of this song exists on the site, use this field to link this derived version to the original. Choose the song by searching by song title.">
					Original version
				</label>
			</div>
			<div class="editor-field">
				<span id="originalContent">
					@{ Html.RenderPartial("SongLink", Model.OriginalVersion); }
				</span>

				<input id="changeOriginalBtn" type="button" value="Change" class="btn" />
				<input id="clearOriginalBtn" type="button" value="Clear" class="btn" />

				<div id="changeOriginalPanel" style="display:none;">
					<div>
						<input type="hidden" id="changeOriginalId" />
						<input type="text" maxlength="128"  id="changeOriginalName" /><br />
					</div>
				</div>
			</div>
   }
			
			<div class="editor-label">
				<label>
					Duration (minutes and seconds)
				</label>
			</div>
			<div class="editor-field">
				<input type="text" data-bind="value: lengthFormatted" class="span2" maxlength="10" />
			</div>
			
			<div class="editor-label">
				<label class="helpTip" data-bind="qTip: null" title="@ViewRes.EntryEditStrings.ExternalLinksQuickHelp">
				    @Html.DisplayNameFor(m => m.WebLinks)
                </label>
			</div>
			<div class="editor-field" data-bind="with: webLinks">
				@KnockoutHelpers.WebLinksEditViewKnockout(true)
				<input type="hidden" name="webLinks" data-bind="value: ko.toJSON(webLinks)" />
			</div>

			<div class="editor-label">
				<label class="helpTip" data-bind="qTip: null" title="@Resources.CommonMessages.EntryStatusExplanation">
				    @Html.DisplayNameFor(m => m.Status)
                </label>
			</div>
			<div class="editor-field">
				@Html.EnumDropDownListFor(m => m.Status, Translate.EntryStatusNames.GetValuesAndNames(Model.AllowedEntryStatuses))
			</div>

		</div>

		<div id="pvsTab" data-bind="with: pvs">

			<table>
				<thead>
					<tr>
						<th>Service</th>
						<th>Type</th>
						<th>Name</th>
						<th>Length</th>
						<th>Author</th>
						<th></th>
					</tr>
				</thead>
				<tbody data-bind="foreach: pvs">
					@{ Html.RenderPartial("PVs/_PVEdit"); }
				</tbody>
			</table>
			@Html.HiddenForKnockout(m => m.PVs, "value: ko.toJSON(pvs)")

			<br />
			<h4>Add media</h4>

			<p>Supported services: Youtube, NicoNicoDouga, Vimeo, SoundCloud, Piapro and Bilibili.</p>
			<p>
				URL:
				<input type="text" data-bind="textInput: newPvUrl" maxlength="255" size="40" class="input-xlarge" />
			</p>
			<p>
				Type:
				<select class="input-xlarge" data-bind="value: newPvType">
					@foreach (var pvType in Translate.PVTypeDescriptions.ValuesAndNamesStrings) {
						<option value="@pvType.Key">@pvType.Value</option>
					}
				</select>
			</p>

			<a data-bind="click: add" href="#" class="textLink addLink">Add</a>
			@Helpers.AjaxLoader("pvLoader")

		</div>

		<div id="lyricsTab">

			@foreach (var lyrics in Model.Lyrics) {
	   Html.RenderPartial("LyricsForSongEditRow", lyrics);
   }
			<a href="#" class="lyricsAddNew textLink addLink" id="lyricsAdd">Add row</a>

		</div>

		<div id="artistsTab">
			<div class="row-fluid">
				<div class="span6">
					<table data-bind="visible: artistLinks().length">
						<thead>
							<tr>
								<th>Artist</th>
								<th>Support</th>
								<th>Roles</th>
								<th>Actions</th>
							</tr>
						</thead>
						<tbody data-bind="foreach: artistLinks">
							@{ Html.RenderPartial("Partials/_ArtistForSongEdit"); }
						</tbody>
					</table>
					<input type="hidden" name="artistLinks" data-bind="value: ko.toJSON(artistLinks)" />

					<br />
					<h4>Add artist</h4>
					<input type="text" data-bind="artistAutoComplete: artistSearchParams" maxlength="128" placeholder="@ViewRes.SharedStrings.Search" class="input-xlarge" />
				</div>
				<div class="span4">
					<div class="alert alert-info">
						<span>Note that you can tag artists for a song much faster after tagging the album first.</span>
					</div>
					<div class="alert" data-bind="visible: validationError_needArtist">
						<span>@ValidationErrors.NeedArtist</span>
					</div>
					<div class="alert" data-bind="visible: validationError_needProducer">
						<span>@ValidationErrors.NeedProducer</span>
					</div>
					<div class="alert" data-bind="visible: validationError_nonInstrumentalSongNeedsVocalists">
						<span>@ValidationErrors.NonInstrumentalSongNeedsVocalists</span>
					</div>
				</div>
			</div>
		</div>
	</div>
	<br />	

	<p>Update notes (optional)</p>
	@Html.TextAreaFor(m => m.UpdateNotes, new { @class = "input-xxlarge", @rows = 4, maxlength = 200 })
	
	<br />
	@Helpers.SaveAndBackBtn(Url.Action("Details", new { Model.Id }))
	
</form>

@{ Html.RenderPartial("Partials/_EditArtistRolesPopup"); }

@section BodyScripts {
<script type="text/javascript" src="@Url.Content("~/Scripts/Shared/EntrySearchDrop.js")"></script>
@Scripts.Render("~/bundles/shared/edit", "~/bundles/Song/Edit")

<script type="text/javascript">

	$(document).ready(function () {

		ko.punches.enableAll();

		vdb.resources.song = {
			addExtraArtist: "@Html.Raw(AjaxRes.SharedStrings.AddExtraArtist)"
		};

		var canBulkDeletePVs = @ToJS(Login.Manager.HasPermission(VocaDb.Model.Domain.Security.PermissionToken.BulkDeletePVs));
		var rootPath = '@RootPath';
		var urlMapper = new vdb.UrlMapper(rootPath);
		var artistRepo = new vdb.repositories.ArtistRepository(rootPath);
		var pvRepo = new vdb.repositories.PVRepository(urlMapper);
		var webLinkCategoryJson = @Html.Raw(JsonHelpers.Serialize(Translate.WebLinkCategoryNames.AllFields));
		var artistRoleJson = @Html.Raw(JsonHelpers.Serialize(Translate.ArtistRoleNames.ValuesAndNames, false));
		var modelJson = @Html.Raw(JsonHelpers.Serialize(Model.ToJsonModel()));
		ko.applyBindings(new vdb.viewModels.SongEditViewModel(artistRepo, pvRepo, urlMapper, artistRoleJson, webLinkCategoryJson, modelJson, canBulkDeletePVs));

		initPage(@Model.Id);
	});

</script>
}