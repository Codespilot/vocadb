@using R = ViewRes.Tag.DetailsStrings;
@using VocaDb.Model.Domain.Images
@using VocaDb.Model.Utils
@using VocaDb.Model.Helpers
@using VocaDb.Web.Helpers;
@using SharedRes = ViewRes.SharedStrings;
@inherits VocaDb.Web.Code.VocaDbPage<VocaDb.Model.DataContracts.Tags.TagDetailsContract>

@{

	ViewBag.PageTitle = R.TagDetails + " - " + Model.Name;
	ViewBag.Title = Model.Name;
	ViewBag.SubTitle = R.Tag;
	ViewBag.Parents = new[] { Html.ActionLink(ViewRes.SharedStrings.Tags, "Index") };

	var smallThumbUrl = ImageHelper.GetImageUrl(Model.Thumb, ImageSize.SmallThumb);
	var thumbUrl = ImageHelper.GetImageUrl(Model.Thumb, ImageSize.Original);
	if (!string.IsNullOrEmpty(thumbUrl)) {
		ViewContext.Controller.ViewBag.Banner = thumbUrl;
	}

	var url = VocaUriBuilder.CreateAbsolute(Url.Action("Details", new { id = Model.Name })).ToString();
	var descriptionHtml = MarkdownHelper.TranformMarkdown(Model.Description);
	var descriptionStripped = HtmlHelperFunctions.StripHtml(descriptionHtml);
	
	var related = new List<Tuple<string, string>>();

	if (Model.Parent != null) {
		related.Add(Tuple.Create(Model.Parent, "parent"));		
	}
	
	related.AddRange(Model.Children.Select(t => Tuple.Create(t, "child")));
	related.AddRange(Model.Siblings.Select(t => Tuple.Create(t, "sibling")));
	
}

@section Head {
	@HtmlHelpers.OpenGraphMetaTags(
		url: url,
		description: descriptionStripped
	)
	<link rel="canonical" href="@url" />
}

@section BodyScripts {
	<link rel="stylesheet" href="@Url.Content("~/Content/Styles/Pager.css")" type="text/css" />
	<script src="http://code.highcharts.com/highcharts.js" type="text/javascript"></script>
	<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")"></script>
	<script type="text/javascript" src="@Url.Content("~/Scripts/Tag/Details.js")"></script>
	<script type="text/javascript">

		$(document).ready(function () {

			var urlMapper = new vdb.UrlMapper('@UrlMapper.HostAddress');
			var jsonModel = @Html.Raw(JsonHelpers.Serialize(new { Model.Name, Model.Parent, Model.Children, Model.Siblings }));

			$("#tabs").tabs({ load: function (event, ui) { vdb.functions.disableTabReload(ui.tab); } });
			$("#editTagLink").button({ disabled: $("#editTagLink").hasClass("disabled"), icons: { primary: 'ui-icon-wrench' } });
			$("#viewVersions").button({ icons: { primary: 'ui-icon-clock' } });
			initChart(urlMapper, jsonModel.name, jsonModel.parent, jsonModel.siblings, jsonModel.children);
		});

	</script>
}

@section Toolbar {
	@Html.ActionLink(ViewRes.SharedStrings.Edit, "Edit", new { id = Model.Name }, new { id = "editTagLink", @class = (Login.CanEdit(Model) ? "" : "disabled") })
	@Html.ActionLink(ViewRes.EntryDetailsStrings.ViewModifications, "Versions", new { id = Model.Name }, new { id = "viewVersions" })
	@Helpers.EntryStatusMessage(Model.Status)
}

<div class="well well-transparent">
	<h3>@R.Overview</h3>

	<div class="media">
		@if (!string.IsNullOrEmpty(smallThumbUrl)) {
			<a class="pull-left" href="@thumbUrl">
				<img class="media-object" src="@smallThumbUrl" alt="Thumb" />
			</a>
		}

		<div class="media-body">
			@if (Model.Description != string.Empty) {
				@Html.Raw(descriptionHtml)
			}

			@if (Model.CategoryName != string.Empty) {
				<p>@R.Category: @Model.CategoryName</p>
			}

			@if (!string.IsNullOrEmpty(Model.AliasedTo)) {
				<p>Aliased to @Html.ActionLink(Model.AliasedTo, "Details", new { id = Model.AliasedTo })</p>
			}

			@if (Model.Aliases.Any()) {
				<p>Aliases: @Html.LinkList(Model.Aliases, alias => Html.ActionLink(alias, "Details", new { id = alias }))</p>
			}

			@if (related.Any()) {
				<div id="hierarchyContainer" style='width: 1000px; height: @((75 + (Model.Parent != null ? 125 : 0) + (Model.Children.Any() ? 125 : 0)) + "px")'></div>
			}
			
			<br />
			
			@if (Model.ArtistCount > 0) {
				<div>
					@Html.ActionLink(R.AllArtists + " (" + Model.ArtistCount + ")", "Index", "Search", UrlMapper.Search.Artists(tag: Model.Name), null)
				</div>
			}
			
			@if (Model.AlbumCount > 0) {
				<div>
					@Html.ActionLink(R.AllAlbums + " (" + Model.AlbumCount + ")", "Index", "Search", UrlMapper.Search.Albums(tag: Model.Name), null)
				</div>
			}
			
			@if (Model.SongCount > 0) {
				<div>
					@Html.ActionLink(R.AllSongs + " (" + Model.SongCount + ")", "Index", "Search", UrlMapper.Search.Songs(tag: Model.Name), null)
				</div>
			}

		</div>
	</div>
</div>

@if (Model.Artists.Any()) {
	<div class="well well-transparent">
		@Helpers.ShowMore(href: Url.Action("Index", "Search", UrlMapper.Search.Artists(tag: Model.Name)))
		<h3>
			<a href="@Url.Action("Index", "Search", UrlMapper.Search.Artists(tag: Model.Name))">
				@R.TopArtists
				<small>(@Model.ArtistCount @SharedRes.Total)</small>
			</a>
		</h3>
		@ArtistHelpers.ArtistGrid(Model.Artists.Select(a => a), 2, true)
	</div>
}

@if (Model.Albums.Any()) {
	<div class="well well-transparent">
		@Helpers.ShowMore(href: Url.Action("Index", "Search", UrlMapper.Search.Albums(tag: Model.Name)))
		<h3>
			<a href="@Url.Action("Index", "Search", UrlMapper.Search.Albums(tag: Model.Name))">
				@R.TopAlbums
				<small>(@Model.AlbumCount @SharedRes.Total)</small>
			</a>							
		</h3>
		@AlbumHelpers.AlbumGrid(Model.Albums.Select(a => a), 2, false, false, true)
	</div>
}

@if (Model.Songs.Any()) {
	<div class="well well-transparent">
		@Helpers.ShowMore(href: Url.Action("Index", "Search", UrlMapper.Search.Songs(tag: Model.Name)))
		<h3>
			<a href="@Url.Action("Index", "Search", UrlMapper.Search.Songs(tag: Model.Name))">
				@R.TopSongs
				<small>(@Model.SongCount @SharedRes.Total)</small>
			</a>
		</h3>
		@SongHelpers.SongGrid(Model.Songs.Select(s => s), 2, true)
	</div>
}
