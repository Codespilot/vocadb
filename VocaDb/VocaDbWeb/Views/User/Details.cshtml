@using System.Web.Optimization
@using VocaDb.Model.DataContracts.Users;
@using VocaDb.Model.Domain.Users
@using VocaDb.Web.Helpers;
@using VocaDb.Model.Domain.Security;
@using VocaDb.Model.Utils
@using R = ViewRes.User.DetailsStrings;
@inherits VocaDb.Web.Code.VocaDbPage<UserDetailsContract>

@{
	ViewBag.Title = Model.Name;
	ViewBag.Subtitle = Translate.UserGroups[Model.GroupId];

	ViewBag.Parents = new[] {
		Html.ActionLink(ViewRes.SharedStrings.Users, "Index"),
	};

	var ownProfile = (Login.Manager.IsLoggedIn && Login.User.Id == Model.Id && Login.User.Active);
	var canSeeDetailedStats = (ownProfile || !Model.AnonymousActivity || Login.CanModerateUsers);
	var verifiedAccount = (Model.OwnedArtistEntries.Any());

	var url = VocaUriBuilder.CreateAbsolute(Url.Action("Profile", new { id = Model.Name })).ToString();

}

@helper AvatarImg() {
	if (!string.IsNullOrEmpty(Model.Email)) {
		@UserHelpers.ProfileIcon(Model, 120)
	} else {
		<img src="@Url.Content("~/Content/unknown.png")" width="120" height="120" alt="Avatar" />
	}
}

@helper Avatar() {
	if (Login.Manager.IsLoggedIn && Login.User.Id == Model.Id && Login.User.Active) {
		<a href="http://gravatar.com/emails/" title="@R.SetAvatar" id="avatar" class="user-avatar">
			@AvatarImg()
		</a>
	} else {
		@AvatarImg()
	}
}

@section Toolbar {
	@if (ownProfile) {
		@Html.ActionLink(R.MySettings, "MySettings", null, new { id = "mySettingsLink" });
		@Html.Raw("&nbsp;")
		@Html.ActionLink(R.Messages, "Messages", null, new { id = "messagesLink" });
	}

	@if (Login.Manager.IsLoggedIn && Login.User.Id != Model.Id && Login.User.Active) {
		@Html.ActionLink(R.ComposeMessage, "Messages", null, null, null, "composeTab", new { receiverName = Model.Name }, new { id = "composeMessageLink" });
	}

	@if (Login.CanManageUsers && EntryPermissionManager.CanEditUser(Login.Manager, Model.GroupId)) {
		@Html.Raw("&nbsp;")
		@Html.ActionLink(ViewRes.SharedStrings.Edit, "Edit", new { id = Model.Id }, new { id = "editUserLink" });
	}
	@if (Login.Manager.HasPermission(PermissionToken.DisableUsers) && Login.User.Id != Model.Id && Model.Active) {
		@Html.Raw("&nbsp;")
		@Html.ActionLink(R.Disable, "Disable", new { id = Model.Id }, new { id = "disableUserLink" });
	}
}

@if (ownProfile && Login.User.GroupId == UserGroupId.Limited) {
	<div class="alert">
		<h4>Why is my user group "Limited user"?</h4>
		<p>
			In order to prevent spammers and abusers we use automated tools to check users' IP address.
			If you have a dynamic IP, it's possible that someone with the same IP as you was participating in these activities
			and your account was mistakenly reduced, preventing you from editing the database.
		</p><p>
			If this is the case, please @Html.ActionLink("contact us", "Index", "Help") and we'll take care of it. Thank you.
		</p>
	</div>
}
@if (ownProfile && Model.PossibleProducerAccount) {
	<div class="alert alert-info">
		Are you possibly an artist (such as producer, animator or illustrator) working with Vocaloid/UTAU?
		If so, please see the @Html.ActionLink("artist verification page", "RequestVerification").
	</div>
}

<ul class="nav nav-pills">
	<li data-bind="css: { active: view() == 'Overview' }">
		<a href="#" data-bind="click: function() { setOverview(); }">Overview</a>
	</li>
	<li data-bind="css: { active: view() == 'Artists' }">
		<a href="#" data-bind="click: function() { setViewArtists(); }">@R.FollowedArtistsTab</a>
	</li>
	<li data-bind="css: { active: view() == 'Albums' }">
		<a href="#" data-bind="click: function() { setViewAlbums(); }">@R.CollectionTab</a>
	</li>
	<li data-bind="css: { active: view() == 'Songs' }">
		<a href="#" data-bind="click: function() { setViewSongs(); }">@R.FavoriteSongsTab</a>
	</li>
	<li data-bind="css: { active: view() == 'CustomLists' }">
		<a href="#" data-bind="click: function() { setCustomLists(); }">@R.CustomListsTab</a>
	</li>
	<li data-bind="css: { active: view() == 'Comments' }">
		<a href="#" data-bind="click: function() { setComments(); }">@R.Comments</a>
	</li>
</ul>

<div data-bind="visible: view() == 'Overview'">
	<div class="row-fluid">
		<div class="span2 well well-transparent">
			<h4>@Model.Name</h4>
			@Avatar()
			<br />
			<p class="withMargin">
				@Translate.UserGroups[Model.GroupId]
				@if (Model.EffectivePermissions.Contains(PermissionToken.DesignatedStaff))
				{
					<span class="label label-important">@R.Staff</span>
				}
				@if (verifiedAccount)
				{
					<span class="label label-success">@R.VerifiedAccount</span>
				}
				@if (!Model.Active)
				{
					<span class="label">@R.AccountDisabled</span>
				}
				@if (Model.EmailVerified)
				{
					<img src="@Url.Content("~/Content/Icons/tick.png")" title="Verified email" />
				}
			</p>

			<h4 class="withMargin">@R.StatsTab</h4>
			<span>
				@{ var submitText = R.Submissions + ": " + Model.SubmitCount; }
				@if (canSeeDetailedStats)
				{
					<text>@Html.ActionLink(submitText, "EntryEdits", new { id = Model.Id, onlySubmissions = true })</text>
				}
				else
				{
					<text>@submitText</text>
				}
			</span><br />
			<span>
				@{ var editText = R.TotalEdits + ": " + Model.EditCount; }
				@if (canSeeDetailedStats)
				{
					@Html.ActionLink(editText, "EntryEdits", new { id = Model.Id, onlySubmissions = false })
				}
				else
				{
					<text>@editText</text>
				}
			</span><br />
			<span>@R.Comments: @Model.CommentCount</span><br />
			<span>@R.TagVotes: @Model.TagVotes</span><br />
			<span>@R.Power: @Model.Power (@R.Level @Model.Level)</span>

			<h4 class="withMargin">@R.MemberSince</h4>
			@Model.CreateDate.ToShortDateString()
		</div>

		<div class="span8 well well-transparent">

			@if (!string.IsNullOrEmpty(Model.AboutMe))
			{
				<h4>@R.AboutMe</h4>
				@HtmlHelpers.FormatMarkdown(Model.AboutMe)
				<br />
			}

			@if (verifiedAccount)
			{
				<h4>@R.VerifiedOwner</h4>
				@ArtistHelpers.ArtistGrid(Model.OwnedArtistEntries.Select(a => a.Artist), 3, true)
				<br />
			}

			@if (Model.WebLinks.Any())
			{
				<h4>@ViewRes.EntryDetailsStrings.ExternalLinks</h4>
				@EntryDetailsHelpers.ExternalLinksList(Model.WebLinks)
				<br />
			}

			@if (!string.IsNullOrEmpty(Model.TwitterName))
			{
				<h4>@R.TwitterAccount</h4>
				<a href="@("https://twitter.com/" + Model.TwitterName)" class="extLink">@Model.TwitterName</a>
				<br /><br />
			}

			@if (!string.IsNullOrEmpty(Model.Location))
			{
				<h4>@R.Location</h4>
				@Model.Location
				<br /><br />
			}

			@if (Model.FavoriteTags.Any())
			{
				<h4>@R.FavoriteTags</h4>
				@TagHelpers.TagList(Model.FavoriteTags)
				<br /><br />
			}

			@if (ownProfile && !Login.CanManageUsers)
			{
				if (Model.AdditionalPermissions.Any())
				{
					<h4>@R.AdditionalPermissions</h4>
					@Translate.AllPermissionTokenNames(Model.AdditionalPermissions)
				}
			}
			else if (Login.CanManageUsers)
			{
				<h4>@R.LastLogin</h4>
				@Helpers.UniversalTimeLabel(Model.LastLogin)
				if (Login.CanManageUsers)
				{
					@(" (")<a href='http://www.geoiptool.com/?IP=@Model.LastLoginAddress'>@Model.LastLoginAddress</a>@(")")
					<a data-bind="click: function() { checkSFS('@Model.LastLoginAddress'); }" href='#'>StopForumSpam</a>
				}

				if (Model.AdditionalPermissions.Any())
				{
					<h4 class="withMargin">@R.AdditionalPermissions</h4>
					@Translate.AllPermissionTokenNames(Model.AdditionalPermissions)
				}

				if (!string.IsNullOrEmpty(Model.Email))
				{
					<h4 class="withMargin">@R.Email</h4>
					@Model.Email
					if (Model.EmailVerified)
					{
						<img src="@Url.Content("~/Content/Icons/tick.png")" title="Verified email" />
					}
				}

				<h4 class="withMargin">@R.EffectivePermissions</h4>
				@Translate.AllPermissionTokenNames(Model.EffectivePermissions)
			}

		</div>
	</div>

	<br />

	@if (Model.FavoriteAlbums.Any())
	{
		<div class="well well-transparent" id="favoriteAlbums">
			<div class="pull-right">
				<small>
					<a href="#" data-bind="click: function() { scrollToTop(); setViewAlbums(); }">@ViewRes.SharedStrings.ShowMore</a>
				</small>
			</div>
			<h3>
				<a href="#" data-bind="click: function() { scrollToTop(); setViewAlbums(); }">
					@R.SomeAlbumsILike
					<small>(@string.Format(R.Total, Model.AlbumCollectionCount))</small>
				</a>
			</h3>
			@AlbumHelpers.AlbumThumbs(Model.FavoriteAlbums)
		</div>
	}

	@if (Model.LatestRatedSongs.Any())
	{
		<div class="well well-transparent">
			<div class="pull-right">
				<small>
					<a href="#" data-bind="click: function() { scrollToTop(); setViewSongs(); }">@ViewRes.SharedStrings.ShowMore</a>
				</small>
			</div>
			<h3>
				<a href="#" data-bind="click: function() { scrollToTop(); setViewSongs(); }">
					@R.SomeSongsILike
					<small>(@string.Format(R.Total, Model.FavoriteSongCount))</small>
				</a>
			</h3>
			@SongHelpers.SongGrid(Model.LatestRatedSongs, 3)
		</div>
	}

	@if (Model.FollowedArtists.Any())
	{
		<div class="well well-transparent">
			<div class="pull-right">
				<small>
					<a href="#" data-bind="click: function() { scrollToTop(); setViewArtists(); }">@ViewRes.SharedStrings.ShowMore</a>
				</small>
			</div>
			<h3>
				<a href="#" data-bind="click: function() { scrollToTop(); setViewArtists(); }">
					@R.SomeArtistsIFollow
					<small>(@string.Format(R.Total, Model.ArtistCount))</small>
				</a>
			</h3>
			@ArtistHelpers.ArtistGrid(Model.FollowedArtists, 3)
		</div>
	}
	
	<div class="well well-transparent">
		<div class="pull-right">
			<small>
				<a href="#" data-bind="click: function() { scrollToTop(); setComments(); }">@ViewRes.SharedStrings.ShowMore</a>
			</small>
		</div>
		<h3>
			<a data-bind="click: function() { scrollToTop(); setComments(); }" href="#">
				@ViewRes.EntryDetailsStrings.LatestComments
			</a>
		</h3>
		<div>
			@if (Model.LatestComments.Any()) {
				foreach (var comment in Model.LatestComments)
				{
					@CommentHelpers.CommentBodyLarge(comment, true, ownProfile)
				}
			} else {
				<p>@ViewRes.EntryDetailsStrings.NoComments</p>
			}
		</div>		
	</div>
</div>

<div data-bind="visible: view() == 'Artists', with: followedArtistsViewModel">
	@{ Html.RenderPartial("Partials/_FollowedArtists"); }
</div>

<div data-bind="visible: view() == 'Albums', with: albumCollectionViewModel">
	@{ Html.RenderPartial("Partials/_AlbumCollection"); }
</div>

<div data-bind="visible: view() == 'Songs', with: ratedSongsViewModel">
	@{ Html.RenderPartial("Partials/_RatedSongs"); }
</div>

<div data-bind="visible: view() == 'CustomLists'">
	@SongHelpers.SongLists(Model.SongLists)

	@if (ownProfile)
	{
		<a href="@Url.Action("Edit", "SongList")" class="textLink addLink">@R.CreateNewList</a>
	}
</div>

<div data-bind="visible: view() == 'Comments'" class="well well-transparent">
	
	@if (Login.CanManageDb) {
		<div id="newCommentPanel">
			@Html.TextArea("newCommentMessage", string.Empty, 6, 60, new { id = "newCommentMessage", maxlength = 800, @class = "span5", placeholder = ViewRes.DiscussionContentStrings.NewComment })
			<a href="#" class="textLink addLink" id="createComment">@ViewRes.DiscussionContentStrings.AddComment</a>
			<hr />
		</div>
	}

	<div data-bind="foreach: comments" id="comments">
		@{ Html.RenderPartial("Partials/_CommentBody"); }
	</div>
	
</div>

@Html.Hidden("collectionAlbumEditId", string.Empty, new { id = "collectionAlbumEditId" })

@AlbumHelpers.EditCollectionDialog(PurchaseStatus.Nothing, MediaType.Other)

@if (Login.CanManageUsers) {
	<div id="sfsCheckDialog" title="StopForumSpam check"></div>
}

@section Head {
	@Styles.Render("~/Scripts/jqwidgets27/styles/css")
	<link rel="canonical" href="@url" />
}

@section BodyScripts {
	<link rel="stylesheet" href="@Url.Content("~/Content/Styles/Pager.css")" type="text/css" />
	<script type="text/javascript" src="@Url.Content("~/Scripts/jquery.unobtrusive-ajax.min.js")"></script>
	@Scripts.Render("~/bundles/jqxRating", "~/bundles/User/Details")
	<script type="text/javascript">

		function scrollToTop() {
			window.scrollTo(0, 0);
			//$("#nav-bar")[0].scrollIntoView(true);
		}

		$(document).ready(function() {

			var cultureCode = '@UICulture';

			moment.locale(cultureCode);

			var languageSelection = '@UserContext.LanguagePreference';
			var userId = @Model.Id;
			var canDeleteComments = @ToJS(UserContext.HasPermission(PermissionToken.DeleteComments));
			var loggedUserId = @ToJS(UserContext.LoggedUserId);
			var publicCollection = @ToJS(Model.PublicAlbumCollection || Model.Id == UserContext.LoggedUserId);
			var rootPath = '@RootPath';
			var urlMapper = new vdb.UrlMapper(rootPath);
			var adminRepo = new vdb.repositories.AdminRepository(urlMapper);
			var userRepo = new vdb.repositories.UserRepository(urlMapper);
			var artistRepo = new vdb.repositories.ArtistRepository(rootPath);
			var resourceRepo = new vdb.repositories.ResourceRepository(rootPath);
			var songRepo = new vdb.repositories.SongRepository(rootPath);

			var sort = 'Name';
			var groupByRating = true;

			var followedArtistsViewModel = new vdb.viewModels.user.FollowedArtistsViewModel(userRepo, resourceRepo, languageSelection, userId, cultureCode);

			var albumCollectionViewModel = new vdb.viewModels.user.AlbumCollectionViewModel(userRepo, artistRepo, resourceRepo, languageSelection, userId, cultureCode,
				publicCollection, false);

			var ratedSongsViewModel = new vdb.viewModels.user.RatedSongsSearchViewModel(userRepo, artistRepo, songRepo, resourceRepo, languageSelection, userId, cultureCode,
				sort, groupByRating, false);

			var viewModel = new vdb.viewModels.user.UserDetailsViewModel(userId, loggedUserId, canDeleteComments, userRepo, adminRepo, followedArtistsViewModel, albumCollectionViewModel, ratedSongsViewModel);
			ko.applyBindings(viewModel);

			if (window.location.hash && window.location.hash.length > 1) {
				viewModel.setView(window.location.hash.substr(1));
			}

			initPage(userId, "@ViewRes.SharedStrings.Loading", "@R.ConfirmDisable", "@VocaDb.Model.Utils.AppConfig.HostAddress");
		});

	</script>
}