#summary Public API
#labels api

= Overview =

VocaDB provides a public API for accessing artist, album and song information. All API endpoints support both XML and JSON. The first version of the API will be provided "on demand" meaning it will be mostly developed based on requests by parties who have need for such an API. Version 2 will be more strictly REST-oriented, and be based on ASP.NET MVC Web API.


= API version 1 =
== Common parameters ==
Most endpoints accept 2 common parameters:
  * lang: content language. Possible values: Default, Japanese, Romaji, English (optional, defaults to Default).
  * format: output format. Possible values are "Xml" and "Json". JSON is the default format.

Additionally, most queries accept these common filters:
  * start: first entry index, starting from 0 (optional, defaults to 0)
  * maxEntries: number of entries to return (max. 10) (optional, defaults to 10).
  * getTotalCount: whether total number of entries matching the filter should be returned. This causes some extra overhead, so specify this as false if you don't need it.
  * nameMatchMode: mode for matching names. Possible values are Auto, Partial, Exact, Words (optional, defaults to Exact)

Some queries allow you to filter which components are to be included. Currently, these filters are specified as boolean values, for example includeArtists=true causes the list of artists to be included with the song or album, whereas specifying includeArtists=false leaves out the list. It's preferably to only include the components that you need, as this can make the query a lot faster, and also reduces the data transfer need.

Some endpoints implement the "callback" parameter for JSONP queries. This is required for cross-site calls from Javascript. When using jQuery with the "jsonp" type, this will be handled transparently.

== API responses ==
Generally listings return only partial data while querying a single entry by ID returns full contents. For translations, the current convention is to return all names (including translations and aliases) for root entities (the entities being queried), and only one name (determined by the lang parameter) for child entities.

For example, when querying albums, all names will be included for the album itself, but linked artists will only include one name, and no translations or aliases.

== Albums ==
=== Albums listing ===
Endpoint: /Api/v1/Album

Example: http://vocadb.net/Api/v1/Album?format=Xml&query=5150

Parameters:
  * query: filter for album name or catalog number.
  * discType: filter for album type. If Unknown (which is the default), no filtering is done.
  * sort: sort method. Possible values are None, Name, ReleaseDate, AdditionDate, RatingAverage and NameThenReleaseDate. Default value is Name.
  * includeArtists: whether artists list should be included (default is true).
  * includeNames: whether full list of names should be included (default is true).
  * includeTags: whether tags should be included (default is true).
  * includeWebLinks: whether web links list should be included (default is false).

=== Query single album by ID ===
Endpoint: /Api/v1/Album/Details/[id]

Example: http://vocadb.net/Api/v1/Album/Details/71?format=Xml

Parameters:
  * includeArtists: whether artists list should be included (default is true).
  * includeNames: whether full list of names should be included (default is true).
  * includeTags: whether tags should be included (default is true).
  * includeWebLinks: whether web links list should be included (default is false).

=== Query album tracks by ID ===
Endpoint: /Api/v1/Album/Tracks/[id]

Example: http://vocadb.net/Api/v1/Album/Tracks/71?format=Xml

== Artists ==
=== Artist listing ===
Endpoint: /Api/v1/Artist/ByName

Example: http://vocadb.net/Api/v1/Artist/ByName?query=tripshots

No special parameters.

== Songs ==
=== Query single song by ID ===
Endpoint: /Api/v1/Song/Details/[id]

Example: http://vocadb.net/Api/v1/Song/Details/121?format=Xml

Parameters:
  * includeAlbums: whether albums list should be included (default is true).
  * includeArtists: whether artists list should be included (default is true).
  * includeNames: whether full list of names should be included (default is true).
  * includePVs: whether list of PVs should be included (default is false).
  * includeTags: whether tags should be included (default is true).
  * includeWebLinks: whether web links list should be included (default is false).

=== Song listing ===
Endpoint: /Api/v1/Song/ByName

Example: http://vocadb.net/Api/v1/Song/ByName?query=Nebula

Parameters:
  * includeAlbums: whether albums list should be included (default is true).
  * includeArtists: whether artists list should be included (default is true).
  * includeNames: whether full list of names should be included (default is true).
  * includePVs: whether list of PVs should be included (default is false).
  * includeTags: whether tags should be included (default is true).
  * includeWebLinks: whether web links list should be included (default is false).

=== Query by PV ===
Endpoint: /Api/v1/Song/ByPV

Example: http://vocadb.net/api/v1/Song/ByPV?pvId=sm19923781&service=NicoNicoDouga

Parameters:
  * service: PV service. Possible values are NicoNicoDouga, Youtube, SoundCloud, Vimeo, Piapro and Bilibili.
  * pvId: PV ID, format varies by service. For example, for NicoNicoDouga, this is the "sm" ID.